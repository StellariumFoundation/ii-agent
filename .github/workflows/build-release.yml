name: Build and Release II-Agent Desktop

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build_and_release_desktop_app:
    name: Build Desktop App for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # node-version: [20.x]
        # python-version: ['3.10']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Add caching for pip dependencies here if desired:
        # - name: Cache pip dependencies
        #   uses: actions/cache@v3
        #   with:
        #     path: ~/.cache/pip
        #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        #     restore-keys: |
        #       ${{ runner.os }}-pip-

      - name: Install Neutralinojs CLI
        run: npm install -g @neutralinojs/neu

      - name: Reminder for Manual Next.js HTML Template Modification
        run: |
          echo "---------------------------------------------------------------------"
          echo "IMPORTANT REMINDER:"
          echo "This CI workflow assumes that the Next.js HTML template"
          echo "(e.g., frontend/pages/_document.tsx or equivalent for App Router)"
          echo "has been manually modified in your committed code to correctly load:"
          echo "1. /neutralino.js (from app root)"
          echo "2. /js/app_bootstrap.js (from app/js/)"
          echo "These scripts MUST be loaded BEFORE the main React application bundle."
          echo "If this manual step in your Next.js project is not done, the app won't work."
          echo "---------------------------------------------------------------------"

      - name: Run the main build script
        shell: bash
        run: |
          chmod +x ./build_desktop.sh
          ./build_desktop.sh

      - name: Determine Artifact Directory Name (within ./ii_agent_desktop/dist/)
        id: determine_artifact_dir
        shell: bash
        run: |
          cd ./ii_agent_desktop/dist/
          # The first directory found is assumed to be the versioned app name dir
          # Neutralino typically names it like <appname>-v<version>
          # Example: ii-agent-desktop-v0.1.0
          # We need to handle cases where there might be other files or just one dir.
          # This tries to find a directory. If multiple, takes first. If none, error.
          ARTIFACT_MAIN_DIR_CANDIDATE=$(ls -d */ | head -n 1 | sed 's/\///')
          if [ -z "$ARTIFACT_MAIN_DIR_CANDIDATE" ]; then
            echo "::error::Could not determine Neutralino artifact main directory in ./ii_agent_desktop/dist/. No subdirectories found."
            # Fallback: Check if files are directly in dist (less common for neu build --release)
            if [ -n "$(ls -A .)" ]; then # Check if current dir (dist) has files
              echo "Files found directly in dist/. Using current directory '.' as ARTIFACT_MAIN_DIR relative to dist/."
              ARTIFACT_MAIN_DIR_CANDIDATE="." # Use current directory (dist)
            else
              exit 1 # Truly empty or unexpected structure
            fi
          fi
          echo "ARTIFACT_MAIN_DIR=${ARTIFACT_MAIN_DIR_CANDIDATE}" >> $GITHUB_OUTPUT
          echo "Determined artifact main directory relative to dist/: ${ARTIFACT_MAIN_DIR_CANDIDATE}"

      - name: Prepare Release Artifact Name and Path
        id: artifact_details
        shell: bash
        env:
          ARTIFACT_MAIN_DIR: ${{ steps.determine_artifact_dir.outputs.ARTIFACT_MAIN_DIR }}
          RELEASE_TAG: ${{ github.ref_name || 'dev' }} # Use tag name or 'dev' for manual runs
        run: |
          APP_NAME_VERSION_OS="ii-agent-desktop-${RELEASE_TAG}-${{ matrix.os }}"
          ARTIFACT_PATH_IN_DIST="./ii_agent_desktop/dist" # Path to dist from repo root

          cd "$ARTIFACT_PATH_IN_DIST/$ARTIFACT_MAIN_DIR" # cd into the versioned dir or '.' (dist itself)

          ACTUAL_ARTIFACT_NAME=""

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Neutralino typically produces a .exe installer or a portable .zip / folder
            # For portable, it's often <appname>-win_x64.exe inside the ARTIFACT_MAIN_DIR or a subfolder
            # If an installer .exe is directly in ARTIFACT_MAIN_DIR:
            INSTALLER_EXE=$(ls | grep -E 'ii-agent-desktop.*\.exe$' | head -n 1)
            PORTABLE_EXE_IN_SUBFOLDER=$(ls ii-agent-desktop-win_x64/ii-agent-desktop-win_x64.exe 2>/dev/null | head -n 1)

            if [ -n "$INSTALLER_EXE" ]; then
                ACTUAL_ARTIFACT_NAME="$INSTALLER_EXE"
            elif [ -n "$PORTABLE_EXE_IN_SUBFOLDER" ]; then
                # Zip the ii-agent-desktop-win_x64 folder
                zip -r "${APP_NAME_VERSION_OS}.zip" "ii-agent-desktop-win_x64"
                ACTUAL_ARTIFACT_NAME="${APP_NAME_VERSION_OS}.zip"
            else # Fallback: zip current dir contents (which is ARTIFACT_MAIN_DIR)
                echo "Windows: No specific .exe or portable folder found, zipping current directory."
                zip -r "${APP_NAME_VERSION_OS}.zip" .
                ACTUAL_ARTIFACT_NAME="${APP_NAME_VERSION_OS}.zip"
            fi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Look for .app (directory), .dmg. Neutralino usually makes a .app folder.
            APP_BUNDLE_NAME=$(ls -d *.app | head -n 1) # -d to list directory itself
            DMG_NAME=$(ls | grep -E '\.dmg$' | head -n 1)
            if [ -n "$DMG_NAME" ]; then
                ACTUAL_ARTIFACT_NAME="$DMG_NAME"
            elif [ -n "$APP_BUNDLE_NAME" ]; then
                # Zip the .app bundle
                zip -r "${APP_BUNDLE_NAME}.zip" "$APP_BUNDLE_NAME"
                ACTUAL_ARTIFACT_NAME="${APP_BUNDLE_NAME}.zip"
            else
                echo "MacOS: No .app or .dmg found, zipping current directory."
                zip -r "${APP_NAME_VERSION_OS}.zip" .
                ACTUAL_ARTIFACT_NAME="${APP_NAME_VERSION_OS}.zip"
            fi
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            APPIMAGE_NAME=$(ls | grep -E '\.AppImage$' | head -n 1)
            DEB_NAME=$(ls | grep -E '\.deb$' | head -n 1)
            TARGZ_NAME=$(ls | grep -E '\.tar\.gz$' | head -n 1)
            # Neutralino portable for Linux is often <appname>-linux_x64 (an executable)
            LINUX_EXEC_NAME=$(ls ii-agent-desktop-linux_x64 2>/dev/null | head -n 1) # Check if it's an executable file
            LINUX_DIR_NAME="ii-agent-desktop-linux_x64" # The folder neu might create

            if [ -n "$APPIMAGE_NAME" ]; then ACTUAL_ARTIFACT_NAME="$APPIMAGE_NAME";
            elif [ -n "$DEB_NAME" ]; then ACTUAL_ARTIFACT_NAME="$DEB_NAME";
            elif [ -n "$TARGZ_NAME" ]; then ACTUAL_ARTIFACT_NAME="$TARGZ_NAME";
            elif [ -f "$LINUX_DIR_NAME/$LINUX_DIR_NAME" ]; then # Executable inside folder
                zip -r "${LINUX_DIR_NAME}.zip" "$LINUX_DIR_NAME"; ACTUAL_ARTIFACT_NAME="${LINUX_DIR_NAME}.zip";
            elif [ -f "$LINUX_DIR_NAME" ]; then # Direct executable if ARTIFACT_MAIN_DIR was '.' and exec is in dist/
                 zip -r "${LINUX_DIR_NAME}.zip" "$LINUX_DIR_NAME"; ACTUAL_ARTIFACT_NAME="${LINUX_DIR_NAME}.zip";
            else
                echo "Linux: No specific artifact type found, zipping current directory."
                zip -r "${APP_NAME_VERSION_OS}.zip" .; ACTUAL_ARTIFACT_NAME="${APP_NAME_VERSION_OS}.zip";
            fi
          fi

          if [ -z "$ACTUAL_ARTIFACT_NAME" ]; then
            echo "::error::Could not determine or create specific artifact for ${{ matrix.os }}. Zipping $PWD as fallback."
            # Current directory is $ARTIFACT_PATH_IN_DIST/$ARTIFACT_MAIN_DIR
            zip -r "${APP_NAME_VERSION_OS}.zip" . # Zip the content of ARTIFACT_MAIN_DIR
            echo "artifact_filename=${APP_NAME_VERSION_OS}.zip" >> $GITHUB_OUTPUT
            # Path from dist/ARTIFACT_MAIN_DIR to the zip file (which is just the zip file itself in this case)
            echo "artifact_sub_path=${APP_NAME_VERSION_OS}.zip" >> $GITHUB_OUTPUT
          else
            echo "artifact_filename=${ACTUAL_ARTIFACT_NAME}" >> $GITHUB_OUTPUT
            echo "artifact_sub_path=${ACTUAL_ARTIFACT_NAME}" >> $GITHUB_OUTPUT # Path relative to ARTIFACT_MAIN_DIR
            echo "Determined/Created artifact: ${ACTUAL_ARTIFACT_NAME} in $PWD"
          fi

      - name: Upload Artifact for Workflow Run
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_details.outputs.artifact_filename }}
          # Path is from repo root: ./ii_agent_desktop/dist/ARTIFACT_MAIN_DIR/ACTUAL_ARTIFACT_NAME
          path: ./ii_agent_desktop/dist/${{ steps.determine_artifact_dir.outputs.ARTIFACT_MAIN_DIR }}/${{ steps.artifact_details.outputs.artifact_sub_path }}
          if-no-files-found: error

      - name: Create GitHub Release and Upload Assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./ii_agent_desktop/dist/${{ steps.determine_artifact_dir.outputs.ARTIFACT_MAIN_DIR }}/${{ steps.artifact_details.outputs.artifact_sub_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

```
